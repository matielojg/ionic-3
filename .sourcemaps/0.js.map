{"version":3,"sources":["../../src/pages/profile/profile.module.ts","../../src/pages/profile/profile.ts","../../src/services/domain/cliente.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACR;AAUxC;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAR7B,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,6DAAW;aACZ;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,6DAAW,CAAC;aACtC;SACF,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;ACZY;AACe;AAEO;AACO;AAClB;AAMrD;IAIE,qBAAmB,OAAsB,EAAS,SAAoB,EAAS,OAAuB,EAC7F,cAA8B;QADpB,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAW;QAAS,YAAO,GAAP,OAAO,CAAgB;QAC7F,mBAAc,GAAd,cAAc,CAAgB;IACvC,CAAC;IAED,oCAAc,GAAd;QAAA,iBAUC;QATC,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QAC5C,EAAE,EAAC,SAAS,IAAI,SAAS,CAAC,KAAK,CAAC,EAAC;YAC/B,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC;iBAC7C,SAAS,CAAC,kBAAQ;gBACjB,KAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;gBACxB,KAAI,CAAC,gBAAgB,EAAE,CAAC;YAC1B,CAAC,EACD,eAAK,IAAK,CAAC,CAAC,CAAC;QACjB,CAAC;IACH,CAAC;IACD,sCAAgB,GAAhB;QAAA,iBAMC;QALC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC;aACtD,SAAS,CAAC,kBAAQ;YACjB,KAAI,CAAC,OAAO,CAAC,QAAQ,GAAM,sEAAU,CAAC,aAAa,WAAM,KAAI,CAAC,OAAO,CAAC,EAAE,SAAM,CAAC;QACjF,CAAC,EACD,eAAK,IAAK,CAAC,CAAC,CAAC;IACf,CAAC;IAzBU,WAAW;QAJvB,wEAAS,CAAC;YACT,QAAQ,EAAE,cAAc;WACG;SAC5B,CAAC;sGAKsG;YAC7E,QAAc;OAL5B,WAAW,CA0BvB;IAAD,CAAC;AAAA;SA1BY,WAAW,e;;;;;;;;;;;;;;;;;;;;;;ACXmB;AACoB;AAGV;AACD;AAGpD;IAEI,wBAAmB,IAAgB,EAAS,OAAuB;QAAhD,SAAI,GAAJ,IAAI,CAAY;QAAS,YAAO,GAAP,OAAO,CAAgB;IACnE,CAAC;IAED,oCAAW,GAAX,UAAY,KAAa;QAErB,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC;QAC9C,IAAI,UAAU,GAAG,IAAI,yEAAW,CAAC,EAAC,eAAe,EAAE,SAAS,GAAG,KAAK,EAAC,CAAC,CAAC;QAEvE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CACb,sEAAU,CAAC,OAAO,8BAAyB,KAAO,EACrD,EAAC,SAAS,EAAE,UAAU,EAAC,CAAC,CAAC;IACjC,CAAC;IAED,2CAAkB,GAAlB,UAAmB,EAAW;QAC1B,IAAI,GAAG,GAAM,sEAAU,CAAC,aAAa,WAAM,EAAE,SAAM;QACnD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,EAAC,YAAY,EAAG,MAAM,EAAC,CAAC,CAAC;IACvD,CAAC;IAlBQ,cAAc;QAD1B,yEAAU,EAAE;yCAGgB,wEAAU,EAAkB,wEAAc;OAF1D,cAAc,CAmB1B;IAAD,qBAAC;CAAA;AAnB0B","file":"0.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ProfilePage } from './profile';\n\n@NgModule({\n  declarations: [\n    ProfilePage,\n  ],\n  imports: [\n    IonicPageModule.forChild(ProfilePage),\n  ],\n})\nexport class ProfilePageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/profile/profile.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { ClienteDTO } from '../../models/cliente.dto';\nimport { StorageService } from '../../services/storage.service';\nimport { ClienteService } from '../../services/domain/cliente.service';\nimport { API_CONFIG } from '../../config/api.config';\n@IonicPage()\n@Component({\n  selector: 'page-profile',\n  templateUrl: 'profile.html',\n})\nexport class ProfilePage {\n\n  cliente: ClienteDTO;\n\n  constructor(public navCtrl: NavController, public navParams: NavParams, public storage: StorageService,\n    public clienteService: ClienteService)  {\n  }\n\n  ionViewDidLoad() {\n    let localUser = this.storage.getLocalUser();\n    if(localUser && localUser.email){\n      this.clienteService.findByEmail(localUser.email)\n        .subscribe(response => {\n          this.cliente = response;\n          this.getImageIfExists();\n        },\n        error => {});\n    }\n  }\n  getImageIfExists() {\n    this.clienteService.getImageFromBucket(this.cliente.id)\n    .subscribe(response => {\n      this.cliente.imageUrl = `${API_CONFIG.bucketBaseUrl}/cp${this.cliente.id}.jpg`;\n    },\n    error => {});\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/profile/profile.ts","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Observable } from \"rxjs/Rx\";\nimport { ClienteDTO } from \"../../models/cliente.dto\";\nimport { API_CONFIG } from \"../../config/api.config\";\nimport { StorageService } from \"../storage.service\";\n\n@Injectable()\nexport class ClienteService {\n\n    constructor(public http: HttpClient, public storage: StorageService) {\n    }\n\n    findByEmail(email: string) : Observable<ClienteDTO> {\n\n        let token = this.storage.getLocalUser().token;\n        let authHeader = new HttpHeaders({'Authorization': 'Bearer ' + token});\n\n        return this.http.get<ClienteDTO>(\n            `${API_CONFIG.baseUrl}/clientes/email?value=${email}`,\n            {'headers': authHeader});\n    }\n\n    getImageFromBucket(id : string) : Observable<any> {\n        let url = `${API_CONFIG.bucketBaseUrl}/cp${id}.jpg`\n        return this.http.get(url, {responseType : 'blob'});\n    }\n} \n\n\n// WEBPACK FOOTER //\n// ./src/services/domain/cliente.service.ts"],"sourceRoot":""}